name: Deploy website on push

on:
  push:
    branches:
      - main

jobs:
  web-build:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}      
      DB_USER: ${{ secrets.DB_USER }}      
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, bcmath, xdebug, mysqli
        coverage: xdebug

    - name: Install Composer globally
      run: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

    - name: Install Composer dependencies
      run: |
        composer install --no-interaction --prefer-dist

    - name: Verify PHPUnit installation
      run: |
        composer show phpunit/phpunit

    - name: Check if Xdebug is enabled
      run: php -m | grep xdebug

    - name: Fix execute permissions for PHPUnit
      run: |
        chmod +x vendor/bin/phpunit  

    - name: Validate PHP syntax for all PHP files
      run: |
        echo "Checking PHP syntax for all PHP files..."
        for file in $(find ./app -type f -name "*.php"); do
          php -l $file
          if [ $? -ne 0 ]; then
            echo "Syntax error in $file. Exiting."
            exit 1
          fi
        done

    - name: List tests
      run: vendor/bin/phpunit --configuration phpunit.xml --list-tests

    - name: Test MySQL Connection
      run: |
        echo "Testing MySQL connection..."
        mysql -h"${{ secrets.DB_HOST }}" -u"${{ secrets.DB_USER }}" -p"${{ secrets.DB_PASSWORD }}" -e "SHOW DATABASES;"

    - name: Wait for MySQL to be ready (with timeout)
      run: |
        MAX_TRIES=60
        COUNT=0
        while ! mysqladmin ping -h"${{ secrets.DB_HOST }}" -u"${{ secrets.DB_USER }}" -p"${{ secrets.DB_PASSWORD }}" --silent; do
          if [ $COUNT -ge $MAX_TRIES ]; then
            echo "MySQL did not become ready in time, exiting."
            exit 1
          fi
          echo "Waiting for MySQL to be ready..."
          sleep 3
          COUNT=$((COUNT+1))
        done
        echo "MySQL is ready!"

    - name: Run PHPUnit tests with code coverage report
      run: |
        mkdir -p artifacts-coverage-report
        vendor/bin/phpunit --configuration phpunit.xml --coverage-clover artifacts-coverage-report/coverage-report.xml --stop-on-failure || exit 1

    - name: Generate and Download Coverage Report
      run: |
        php public/custom-script/generate_coverage_report.php

    - name: Upload code coverage report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: artifacts-coverage-report
        path: artifacts-coverage-report/**

    - name: Commit and Push Coverage Report to Repository
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git remote set-url origin https://${GITHUB_TOKEN}@github.com/kalpanavasava/demo_project_cicd.git
        git add artifacts-coverage-report/
        git commit -m "Add code coverage report [skip ci]"
        git push 

  web-deploy:
    name: Deploy
    needs: web-build
    runs-on: ubuntu-latest

    steps:
    - name: Get latest code
      uses: actions/checkout@v2

    - name: Sync files to server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.ftp_server }}
        username: ${{ secrets.ftp_username }}
        password: ${{ secrets.ftp_password }}
        server_dir: /public_html/demo_project_cicd/
        local_dir: ./  # Local directory to deploy
        ftp_options: |
          --dry-run   # Run a dry-run to test without actually uploading anything.
          --verbose   # Log more detailed information for debugging.
