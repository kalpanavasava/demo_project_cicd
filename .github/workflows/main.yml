name: Deploy website on push

on:
  push:
    branches:
      - main

jobs:
  web-build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: demo_project_cicd
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost --silent" --health-interval=5s --health-timeout=3s --health-retries=3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP and MySQL
      run: |
        sudo apt-get update
        sudo apt-get install mysql-client

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, bcmath, xdebug, mysqli
        coverage: xdebug

    - name: Install Composer globally
      run: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

    - name: Install Composer dependencies
      run: |
        composer install --no-interaction --prefer-dist

    - name: List all Docker containers
      run: |
        docker ps -a

    # Download and prepare wait-for-it.sh script
    - name: Download wait-for-it.sh script
      run: |
        curl -sSL https://github.com/vishnubob/wait-for-it/releases/download/v2.5.0/wait-for-it.sh -o wait-for-it.sh
        chmod +x wait-for-it.sh   # Ensure it's executable
        sudo apt-get install dos2unix # Install dos2unix
        dos2unix wait-for-it.sh   # Convert Windows line endings to Unix line endings
        cat wait-for-it.sh        # Show the contents of the script (to ensure it's downloaded properly)

    # Wait for MySQL to be ready
    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 3
        done
        echo "MySQL is ready!"

    - name: Run PHPUnit tests with code coverage report
      run: |
        mkdir -p artifacts-coverage-report
        vendor/bin/phpunit --configuration phpunit.xml --coverage-clover artifacts-coverage-report/coverage-report.xml --stop-on-failure || exit 1

    - name: Upload code coverage report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: artifacts-coverage-report
        path: artifacts-coverage-report/**
