name: Deploy website on push

on:
  push:
    branches:
      - main  # Deploy when changes are pushed to the main branch

jobs:
  web-build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, bcmath, xdebug
        coverage: xdebug

    - name: Install Composer globally
      run: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

    - name: Install Composer dependencies
      run: |
        composer install --no-interaction --prefer-dist

    - name: Verify PHPUnit installation
      run: |
        composer show phpunit/phpunit

    - name: Check if Xdebug is enabled
      run: php -m | grep xdebug

    - name: Fix execute permissions for PHPUnit
      run: |
        chmod +x vendor/bin/phpunit  

    # Check syntax for each PHP file and stop on the first error
    - name: Validate PHP syntax for all PHP files
      run: |
        echo "Checking PHP syntax for all PHP files..."
        for file in $(find ./app -type f -name "*.php"); do
          php -l $file
          if [ $? -ne 0 ]; then
            echo "Syntax error in $file. Exiting."
            exit 1
          fi
        done

    - name: List tests
      run: vendor/bin/phpunit --configuration phpunit.xml --list-tests

    - name: Run PHPUnit tests with code coverage report
      run: |
        mkdir -p artifacts-coverage-report
        vendor/bin/phpunit --configuration phpunit.xml --coverage-clover artifacts-coverage-report/coverage-report.xml --stop-on-failure || exit 1
        # vendor/bin/phpunit --configuration phpunit.xml --coverage-html artifacts-coverage-report/html --stop-on-failure || exit 1

    - name: Generate and Download Coverage Report
      run: |
        php custom-script/generate_coverage_report.php

    - name: Upload code coverage report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: artifacts-coverage-report
        path: artifacts-coverage-report/**

    - name: Commit and Push Coverage Report to Repository
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git remote set-url origin https://${GITHUB_TOKEN}@github.com/kalpanavasava/demo_project_cicd.git
        
        # Ensure the coverage-report folder exists
        mkdir -p coverage-report
        
        # Check if artifacts-coverage-report directory exists and contains files
        if [ ! -d "artifacts-coverage-report" ] || [ -z "$(ls -A artifacts-coverage-report)" ]; then
          echo "No coverage report found in 'artifacts-coverage-report'. Exiting."
          exit 1
        fi
        
        # If coverage-report already exists, remove the old files (keeping the folder)
        if [ -d "coverage-report" ]; then
          git rm -r --cached coverage-report/ || true
        fi
        
        # Copy new coverage report files from 'artifacts-coverage-report' to 'coverage-report'
        cp -r artifacts-coverage-report/* coverage-report/
        
        # Pull the latest changes from the remote repository
        git pull origin main --rebase
        
        # Check if there are any changes to commit
        git diff --quiet || git add coverage-report/
        
        # Commit and push changes if there are any changes
        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Add updated code coverage report [skip ci]"
          git push origin main
        fi

    # - name: Commit and Push Coverage Report to Repository
    #   if: success()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
    #   run: |
    #     git config user.name "GitHub Actions"
    #     git config user.email "actions@github.com"
    #     git remote set-url origin https://${GITHUB_TOKEN}@github.com/kalpanavasava/demo_project_cicd.git
    #     git add artifacts-coverage-report/
    #     git commit -m "Add code coverage report [skip ci]"
    #     git push

  # web-deploy:
  #   name: Deploy
  #   needs: web-build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Get latest code
  #     uses: actions/checkout@v2

  #   - name: Sync files to server
  #     uses: SamKirkland/FTP-Deploy-Action@v4.3.5
  #     with:
  #       server: ${{ secrets.ftp_server }}
  #       username: ${{ secrets.ftp_username }}
  #       password: ${{ secrets.ftp_password }}
  #       server_dir: /public_html/demo_project_cicd/
  #       ftp_options: |
  #         --dry-run   # Run a dry-run to test without actually uploading anything.
  #         --verbose   # Log more detailed information for debugging.
